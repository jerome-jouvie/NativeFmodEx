/**
 * 			NativeFmodEx Project
 *
 * Want to use FMOD Ex API (www.fmod.org) in the Java language ? NativeFmodEx is made for you.
 * Copyright © 2005-2010 Jérôme JOUVIE (Jouvieje)
 *
 * Created on 23 feb. 2005
 * @version file v1.5.0
 * @author Jérôme JOUVIE (Jouvieje)
 * @site   http://jerome.jouvie.free.fr/
 * @mail   jerome.jouvie@gmail.com
 * 
 * INTRODUCTION
 * FMOD Ex is a music and sound effects system, by Firelight Technologies Pty, Ltd.
 * More informations can be found at:
 * 		http://www.fmod.org/
 * The aim of this project is to provide a java interface for this amazing sound API.
 * 
 * 
 * GNU LESSER GENERAL PUBLIC LICENSE
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1 of the License,
 * or (at your option) any later version.
 * 
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the
 * Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA 
 */

package org.jouvieje.fmoddesigner.enumerations;

import org.jouvieje.fmoddesigner.*;
import org.jouvieje.fmodex.exceptions.*;
import org.jouvieje.fmoddesigner.callbacks.*;
import org.jouvieje.fmoddesigner.*;
import org.jouvieje.fmoddesigner.defines.*;
import org.jouvieje.fmoddesigner.enumerations.*;
import org.jouvieje.fmoddesigner.structures.*;
import java.nio.*;
import org.jouvieje.fmodex.*;
import org.jouvieje.fmodex.System;
import org.jouvieje.fmodex.enumerations.*;
import org.jouvieje.fmodex.structures.*;
import org.jouvieje.fmodex.utils.*;
import java.util.HashMap;

/**
 * <BR>
 * <BR>
 * Property indices for Event::getPropertyByIndex.<BR>
 * <BR><U><B>Remarks</B></U><BR><BR>
 * <BR><U><B>Platforms Supported</B></U><BR><BR>
 * Win32, Win64, Linux, Macintosh, Xbox, Xbox360, PlayStation 2, GameCube, PlayStation Portable, PlayStation 3, Wii<BR>
 * <BR><U><B>See Also</B></U><BR><BR>
 * Event::getPropertyByIndex<BR>
 * 
 */
public class FMOD_EVENT_PROPERTY implements Enumeration, Comparable {
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_NAME = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_NAME", 0);
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_VOLUME = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_VOLUME", EnumerationJNI.get_FMOD_EVENTPROPERTY_VOLUME());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_VOLUMERANDOMIZATION = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_VOLUMERANDOMIZATION", EnumerationJNI.get_FMOD_EVENTPROPERTY_VOLUMERANDOMIZATION());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_PITCH = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_PITCH", EnumerationJNI.get_FMOD_EVENTPROPERTY_PITCH());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_PITCH_OCTAVES = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_PITCH_OCTAVES", EnumerationJNI.get_FMOD_EVENTPROPERTY_PITCH_OCTAVES());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_PITCH_SEMITONES = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_PITCH_SEMITONES", EnumerationJNI.get_FMOD_EVENTPROPERTY_PITCH_SEMITONES());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_PITCH_TONES = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_PITCH_TONES", EnumerationJNI.get_FMOD_EVENTPROPERTY_PITCH_TONES());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_PITCHRANDOMIZATION = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_PITCHRANDOMIZATION", EnumerationJNI.get_FMOD_EVENTPROPERTY_PITCHRANDOMIZATION());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_OCTAVES = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_OCTAVES", EnumerationJNI.get_FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_OCTAVES());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_SEMITONES = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_SEMITONES", EnumerationJNI.get_FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_SEMITONES());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_TONES = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_TONES", EnumerationJNI.get_FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_TONES());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_PRIORITY = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_PRIORITY", EnumerationJNI.get_FMOD_EVENTPROPERTY_PRIORITY());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_MAX_PLAYBACKS = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_MAX_PLAYBACKS", EnumerationJNI.get_FMOD_EVENTPROPERTY_MAX_PLAYBACKS());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_MAX_PLAYBACKS_BEHAVIOR = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_MAX_PLAYBACKS_BEHAVIOR", EnumerationJNI.get_FMOD_EVENTPROPERTY_MAX_PLAYBACKS_BEHAVIOR());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_MODE = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_MODE", EnumerationJNI.get_FMOD_EVENTPROPERTY_MODE());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_3D_IGNORE_GEOMETRY = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_3D_IGNORE_GEOMETRY", EnumerationJNI.get_FMOD_EVENTPROPERTY_3D_IGNORE_GEOMETRY());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_3D_ROLLOFF = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_3D_ROLLOFF", EnumerationJNI.get_FMOD_EVENTPROPERTY_3D_ROLLOFF());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_3D_MINDISTANCE = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_3D_MINDISTANCE", EnumerationJNI.get_FMOD_EVENTPROPERTY_3D_MINDISTANCE());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_3D_MAXDISTANCE = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_3D_MAXDISTANCE", EnumerationJNI.get_FMOD_EVENTPROPERTY_3D_MAXDISTANCE());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_3D_POSITION = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_3D_POSITION", EnumerationJNI.get_FMOD_EVENTPROPERTY_3D_POSITION());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_3D_CONEINSIDEANGLE = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_3D_CONEINSIDEANGLE", EnumerationJNI.get_FMOD_EVENTPROPERTY_3D_CONEINSIDEANGLE());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_3D_CONEOUTSIDEANGLE = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_3D_CONEOUTSIDEANGLE", EnumerationJNI.get_FMOD_EVENTPROPERTY_3D_CONEOUTSIDEANGLE());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_3D_CONEOUTSIDEVOLUME = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_3D_CONEOUTSIDEVOLUME", EnumerationJNI.get_FMOD_EVENTPROPERTY_3D_CONEOUTSIDEVOLUME());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_3D_DOPPLERSCALE = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_3D_DOPPLERSCALE", EnumerationJNI.get_FMOD_EVENTPROPERTY_3D_DOPPLERSCALE());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_3D_SPEAKERSPREAD = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_3D_SPEAKERSPREAD", EnumerationJNI.get_FMOD_EVENTPROPERTY_3D_SPEAKERSPREAD());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_3D_PANLEVEL = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_3D_PANLEVEL", EnumerationJNI.get_FMOD_EVENTPROPERTY_3D_PANLEVEL());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_SPEAKER_L = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_SPEAKER_L", EnumerationJNI.get_FMOD_EVENTPROPERTY_SPEAKER_L());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_SPEAKER_C = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_SPEAKER_C", EnumerationJNI.get_FMOD_EVENTPROPERTY_SPEAKER_C());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_SPEAKER_R = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_SPEAKER_R", EnumerationJNI.get_FMOD_EVENTPROPERTY_SPEAKER_R());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_SPEAKER_LS = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_SPEAKER_LS", EnumerationJNI.get_FMOD_EVENTPROPERTY_SPEAKER_LS());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_SPEAKER_RS = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_SPEAKER_RS", EnumerationJNI.get_FMOD_EVENTPROPERTY_SPEAKER_RS());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_SPEAKER_LR = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_SPEAKER_LR", EnumerationJNI.get_FMOD_EVENTPROPERTY_SPEAKER_LR());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_SPEAKER_RR = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_SPEAKER_RR", EnumerationJNI.get_FMOD_EVENTPROPERTY_SPEAKER_RR());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_SPEAKER_LFE = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_SPEAKER_LFE", EnumerationJNI.get_FMOD_EVENTPROPERTY_SPEAKER_LFE());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_REVERBWETLEVEL = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_REVERBWETLEVEL", EnumerationJNI.get_FMOD_EVENTPROPERTY_REVERBWETLEVEL());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_ONESHOT = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_ONESHOT", EnumerationJNI.get_FMOD_EVENTPROPERTY_ONESHOT());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_FADEIN = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_FADEIN", EnumerationJNI.get_FMOD_EVENTPROPERTY_FADEIN());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_FADEOUT = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_FADEOUT", EnumerationJNI.get_FMOD_EVENTPROPERTY_FADEOUT());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_REVERBDRYLEVEL = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_REVERBDRYLEVEL", EnumerationJNI.get_FMOD_EVENTPROPERTY_REVERBDRYLEVEL());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_TIMEOFFSET = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_TIMEOFFSET", EnumerationJNI.get_FMOD_EVENTPROPERTY_TIMEOFFSET());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_SPAWNINTENSITY = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_SPAWNINTENSITY", EnumerationJNI.get_FMOD_EVENTPROPERTY_SPAWNINTENSITY());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_SPAWNINTENSITY_RANDOMIZATION = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_SPAWNINTENSITY_RANDOMIZATION", EnumerationJNI.get_FMOD_EVENTPROPERTY_SPAWNINTENSITY_RANDOMIZATION());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_WII_CONTROLLERSPEAKERS = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_WII_CONTROLLERSPEAKERS", EnumerationJNI.get_FMOD_EVENTPROPERTY_WII_CONTROLLERSPEAKERS());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_3D_POSRANDOMIZATION = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_3D_POSRANDOMIZATION", EnumerationJNI.get_FMOD_EVENTPROPERTY_3D_POSRANDOMIZATION());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_EVENTTYPE = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_EVENTTYPE", EnumerationJNI.get_FMOD_EVENTPROPERTY_EVENTTYPE());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_STEAL_PRIORITY = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_STEAL_PRIORITY", EnumerationJNI.get_FMOD_EVENTPROPERTY_STEAL_PRIORITY());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_EFFECTS_AFFECT_REVERB = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_EFFECTS_AFFECT_REVERB", EnumerationJNI.get_FMOD_EVENTPROPERTY_EFFECTS_AFFECT_REVERB());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_WILL_TERMINATE = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_WILL_TERMINATE", EnumerationJNI.get_FMOD_EVENTPROPERTY_WILL_TERMINATE());
	/**  */
	public final static FMOD_EVENT_PROPERTY FMOD_EVENTPROPERTY_USER_BASE = new FMOD_EVENT_PROPERTY("FMOD_EVENTPROPERTY_USER_BASE", EnumerationJNI.get_FMOD_EVENTPROPERTY_USER_BASE());

	private final static HashMap VALUES = new HashMap(2*49);
	static {
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_NAME.asInt()), FMOD_EVENTPROPERTY_NAME);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_VOLUME.asInt()), FMOD_EVENTPROPERTY_VOLUME);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_VOLUMERANDOMIZATION.asInt()), FMOD_EVENTPROPERTY_VOLUMERANDOMIZATION);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_PITCH.asInt()), FMOD_EVENTPROPERTY_PITCH);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_PITCH_OCTAVES.asInt()), FMOD_EVENTPROPERTY_PITCH_OCTAVES);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_PITCH_SEMITONES.asInt()), FMOD_EVENTPROPERTY_PITCH_SEMITONES);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_PITCH_TONES.asInt()), FMOD_EVENTPROPERTY_PITCH_TONES);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_PITCHRANDOMIZATION.asInt()), FMOD_EVENTPROPERTY_PITCHRANDOMIZATION);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_OCTAVES.asInt()), FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_OCTAVES);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_SEMITONES.asInt()), FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_SEMITONES);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_TONES.asInt()), FMOD_EVENTPROPERTY_PITCHRANDOMIZATION_TONES);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_PRIORITY.asInt()), FMOD_EVENTPROPERTY_PRIORITY);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_MAX_PLAYBACKS.asInt()), FMOD_EVENTPROPERTY_MAX_PLAYBACKS);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_MAX_PLAYBACKS_BEHAVIOR.asInt()), FMOD_EVENTPROPERTY_MAX_PLAYBACKS_BEHAVIOR);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_MODE.asInt()), FMOD_EVENTPROPERTY_MODE);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_3D_IGNORE_GEOMETRY.asInt()), FMOD_EVENTPROPERTY_3D_IGNORE_GEOMETRY);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_3D_ROLLOFF.asInt()), FMOD_EVENTPROPERTY_3D_ROLLOFF);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_3D_MINDISTANCE.asInt()), FMOD_EVENTPROPERTY_3D_MINDISTANCE);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_3D_MAXDISTANCE.asInt()), FMOD_EVENTPROPERTY_3D_MAXDISTANCE);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_3D_POSITION.asInt()), FMOD_EVENTPROPERTY_3D_POSITION);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_3D_CONEINSIDEANGLE.asInt()), FMOD_EVENTPROPERTY_3D_CONEINSIDEANGLE);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_3D_CONEOUTSIDEANGLE.asInt()), FMOD_EVENTPROPERTY_3D_CONEOUTSIDEANGLE);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_3D_CONEOUTSIDEVOLUME.asInt()), FMOD_EVENTPROPERTY_3D_CONEOUTSIDEVOLUME);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_3D_DOPPLERSCALE.asInt()), FMOD_EVENTPROPERTY_3D_DOPPLERSCALE);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_3D_SPEAKERSPREAD.asInt()), FMOD_EVENTPROPERTY_3D_SPEAKERSPREAD);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_3D_PANLEVEL.asInt()), FMOD_EVENTPROPERTY_3D_PANLEVEL);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_SPEAKER_L.asInt()), FMOD_EVENTPROPERTY_SPEAKER_L);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_SPEAKER_C.asInt()), FMOD_EVENTPROPERTY_SPEAKER_C);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_SPEAKER_R.asInt()), FMOD_EVENTPROPERTY_SPEAKER_R);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_SPEAKER_LS.asInt()), FMOD_EVENTPROPERTY_SPEAKER_LS);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_SPEAKER_RS.asInt()), FMOD_EVENTPROPERTY_SPEAKER_RS);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_SPEAKER_LR.asInt()), FMOD_EVENTPROPERTY_SPEAKER_LR);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_SPEAKER_RR.asInt()), FMOD_EVENTPROPERTY_SPEAKER_RR);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_SPEAKER_LFE.asInt()), FMOD_EVENTPROPERTY_SPEAKER_LFE);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_REVERBWETLEVEL.asInt()), FMOD_EVENTPROPERTY_REVERBWETLEVEL);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_ONESHOT.asInt()), FMOD_EVENTPROPERTY_ONESHOT);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_FADEIN.asInt()), FMOD_EVENTPROPERTY_FADEIN);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_FADEOUT.asInt()), FMOD_EVENTPROPERTY_FADEOUT);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_REVERBDRYLEVEL.asInt()), FMOD_EVENTPROPERTY_REVERBDRYLEVEL);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_TIMEOFFSET.asInt()), FMOD_EVENTPROPERTY_TIMEOFFSET);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_SPAWNINTENSITY.asInt()), FMOD_EVENTPROPERTY_SPAWNINTENSITY);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_SPAWNINTENSITY_RANDOMIZATION.asInt()), FMOD_EVENTPROPERTY_SPAWNINTENSITY_RANDOMIZATION);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_WII_CONTROLLERSPEAKERS.asInt()), FMOD_EVENTPROPERTY_WII_CONTROLLERSPEAKERS);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_3D_POSRANDOMIZATION.asInt()), FMOD_EVENTPROPERTY_3D_POSRANDOMIZATION);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_EVENTTYPE.asInt()), FMOD_EVENTPROPERTY_EVENTTYPE);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_STEAL_PRIORITY.asInt()), FMOD_EVENTPROPERTY_STEAL_PRIORITY);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_EFFECTS_AFFECT_REVERB.asInt()), FMOD_EVENTPROPERTY_EFFECTS_AFFECT_REVERB);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_WILL_TERMINATE.asInt()), FMOD_EVENTPROPERTY_WILL_TERMINATE);
		VALUES.put(new Integer(FMOD_EVENTPROPERTY_USER_BASE.asInt()), FMOD_EVENTPROPERTY_USER_BASE);
	}

	private final String name;
	private final int nativeValue;
	private FMOD_EVENT_PROPERTY(String name, int nativeValue) {
		this.name = name;
		this.nativeValue = nativeValue;
	}

	public int asInt() {
		return nativeValue;
	}
	public String toString() {
		return name;
	}
	public boolean equals(Object object) {
		if(object instanceof FMOD_EVENT_PROPERTY) {
			return asInt() == ((FMOD_EVENT_PROPERTY)object).asInt();
		}
		return false;
	}
	public int compareTo(Object object) {
		return asInt() - ((FMOD_EVENT_PROPERTY)object).asInt();
	}


	/**
	 * Retrieve a FMOD_EVENT_PROPERTY enum field with his integer value
	 * @param nativeValue the integer value of the field to retrieve
	 * @return the FMOD_EVENT_PROPERTY enum field that correspond to the integer value
	 */
	public static FMOD_EVENT_PROPERTY get(int nativeValue) {
		return (FMOD_EVENT_PROPERTY)VALUES.get(new Integer(nativeValue));
	}

	/**
	 * Retrieve a FMOD_EVENT_PROPERTY enum field from a Pointer
	 * @param pointer a pointer holding an FMOD_EVENT_PROPERTY enum field
	 * @return the FMOD_EVENT_PROPERTY enum field that correspond to the enum field in the pointer
	 */
	public static FMOD_EVENT_PROPERTY get(Pointer pointer) {
		return get(pointer.asInt());
	}

	/**
	 * @return an <code>Iterator</code> over the elements in this enumeration.<BR>
	 * Can be cast to <code>Iterator<FMOD_EVENT_PROPERTY></code> in Java 1.5.
	 */
	public static java.util.Iterator iterator() {
		return new java.util.Iterator(){
			private java.util.Iterator i = VALUES.values().iterator();	//Wrapper of the HashMap iterator
			public boolean hasNext() { return i.hasNext(); }
			public Object next() { return i.next(); }
			public void remove() { throw new UnsupportedOperationException(); }
		};
	}
}
